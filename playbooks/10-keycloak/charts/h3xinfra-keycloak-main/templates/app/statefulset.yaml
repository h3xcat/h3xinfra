apiVersion: apps/v1
# Use a stateful setup to ensure that for a rolling update Pods are restarted with a rolling strategy one-by-one.
# This prevents losing in-memory information stored redundantly in two Pods.
kind: StatefulSet
metadata:
  name: {{ include "h3xinfra-keycloak-main.fullname" . }}-keycloak
  labels:
    app: keycloak
    {{- include "h3xinfra-keycloak-main.labels" . | nindent 4 }}
  {{- with .Values.keycloak.statefulSet.annotations }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: keycloak-discovery
  # Run with one replica to save resources, or with two replicas to allow for rolling updates for configuration changes
  replicas: 2
  selector:
    matchLabels:
      app: keycloak
      {{- include "h3xinfra-keycloak-main.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: keycloak
        {{- include "h3xinfra-keycloak-main.labels" . | nindent 8 }}
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:26.2.5
          args: ["start"]
          env:
          - name: KC_BOOTSTRAP_ADMIN_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "h3xinfra-keycloak-main.fullname" . }}-keycloak-admin
                key: username
                optional: false
          - name: KC_BOOTSTRAP_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "h3xinfra-keycloak-main.fullname" . }}-keycloak-admin
                key: password
                optional: false
          # In a production environment, add a TLS certificate to Keycloak to either end-to-end encrypt the traffic between
          # the client or Keycloak, or to encrypt the traffic between your proxy and Keycloak.
          # Respect the proxy headers forwarded by the reverse proxy
          # In a production environment, verify which proxy type you are using, and restrict access to Keycloak
          # from other sources than your proxy if you continue to use proxy headers.
          - name: KC_PROXY_HEADERS
            value: "xforwarded"
          - name: KC_HTTP_ENABLED
            value: "true"
          - name: KC_HTTPS_PORT
            value: "8443"
          - name: KC_HTTPS_CERTIFICATE_FILE
            value: "/opt/keycloak/conf/tls.crt"
          - name: KC_HTTPS_CERTIFICATE_KEY_FILE
            value: "/opt/keycloak/conf/tls.key"
          # Additional HTTPS security settings
          - name: KC_HTTPS_PROTOCOLS
            value: "TLSv1.3,TLSv1.2"
          # In this explorative setup, no strict hostname is set.
          # For production environments, set a hostname for a secure setup.
          - name: KC_HOSTNAME
            value: {{ .Values.keycloak.ingress.hostname | quote }}
          - name: KC_HOSTNAME_STRICT
            value: "true"
          - name: KC_HEALTH_ENABLED
            value: "true"
          - name: 'KC_CACHE'
            value: 'ispn'
          # Use the Kubernetes configuration for distributed caches which is based on DNS
          - name: 'KC_CACHE_STACK'
            value: 'kubernetes'
          # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
          # Needs to be unique for each Keycloak cluster
          - name: JAVA_OPTS_APPEND
            value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
          - name: 'KC_DB_URL_DATABASE'
            value: 'keycloak'
          - name: 'KC_DB_URL_HOST'
            value: '{{ include "h3xinfra-keycloak-main.fullname" . }}-postgresql'
          - name: 'KC_DB'
            value: 'postgres'
          - name: 'KC_DB_USERNAME'
            valueFrom:
              secretKeyRef:
                name: {{ include "h3xinfra-keycloak-main.fullname" . }}-postgresql-auth
                key: username
                optional: false
          - name: 'KC_DB_PASSWORD'
            valueFrom:
              secretKeyRef:
                name: {{ include "h3xinfra-keycloak-main.fullname" . }}-postgresql-auth
                key: password
                optional: false
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: tls-certificate
              mountPath: /opt/keycloak/conf
              readOnly: true
          startupProbe:
            httpGet:
              path: /health/started
              port: 9000
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 9000
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health/live
              port: 9000
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: 2000m
              memory: 2000Mi
            requests:
              cpu: 500m
              memory: 1700Mi
      volumes:
        - name: tls-certificate
          secret:
            secretName: {{ include "h3xinfra-keycloak-main.fullname" . }}-keycloak-certificate
