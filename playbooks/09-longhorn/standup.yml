---
- import_playbook: ../99-utils/kube-connect.yml

- name: Setup Longhorn CLI and check preflight requirements
  hosts: k3s_cluster
  gather_facts: true
  become: true
  vars:
    longhorn_cli_version: "v1.9.0"
    longhorn_cli_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"
  serial: 1 
  tasks:
    - name: Download Longhorn CLI
      get_url:
        url: "https://github.com/longhorn/cli/releases/download/{{ longhorn_cli_version }}/longhornctl-linux-{{ longhorn_cli_arch }}"
        dest: "/usr/local/bin/longhornctl"
        mode: '0755'
        owner: root
        group: root

    - name: Verify Longhorn CLI installation
      command: longhornctl version
      register: longhorn_cli_version_output
      changed_when: false

    - name: Display Longhorn CLI version
      debug:
        msg: "{{ longhorn_cli_version_output.stdout }}"

- name: Deploy Longhorn via Helm
  hosts: k8s
  gather_facts: true
  vars:
  tasks:
    - name: Add Longhorn Helm repository
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: https://charts.longhorn.io
        state: present

    - name: Add OAuth2 Proxy Helm repository
      kubernetes.core.helm_repository:
        name: oauth2-proxy
        repo_url: https://oauth2-proxy.github.io/manifests
        state: present

    - name: Create Longhorn namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ longhorn.namespace }}"
        state: present
        wait: true

    - name: Deploy OAuth2 Proxy Helm chart
      kubernetes.core.helm:
        name: "{{ longhorn.release_name_prefix }}-oauth2"
        chart_ref: oauth2-proxy/oauth2-proxy
        chart_version: "8.3.1"
        release_namespace: "{{ longhorn.namespace }}"
        create_namespace: false
        values:
          config:
            clientID: "{{ longhorn.auth.oauth2_proxy.client_id }}"
            clientSecret: "{{ longhorn.auth.oauth2_proxy.client_secret }}"
            cookieSecret: "{{ longhorn.auth.oauth2_proxy.cookie_secret }}"
            cookieName: "_oauth2_proxy_{{ longhorn.release_name_prefix }}"

          extraArgs:
            provider: "oidc"
            oidc-issuer-url: "{{ longhorn.auth.oauth2_proxy.oidc_issuer_url }}"
            cookie-domain: "{{ longhorn.ingress_host }}"
            whitelist-domain: "{{ longhorn.ingress_host }}"
            skip-provider-button: true
            set-xauthrequest: true
            reverse-proxy: true

          service:
            type: ClusterIP
            portNumber: 4180
          
          ingress:
            enabled: true
            className: nginx
            path: /oauth2
            pathType: Prefix
            hosts:
              - "{{ longhorn.ingress_host }}"
            tls: "{{ [{'hosts': [longhorn.ingress_host]}] if longhorn.ingress.tls.enabled | default(false) else [] }}"
          
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi

        state: present
        wait: true
        timeout: "300s"
      when: longhorn.auth.method == "oauth2_proxy"

    - name: Deploy Longhorn pre-configuration via Helm
      kubernetes.core.helm:
        name: "{{ longhorn.release_name_prefix }}-pre"
        chart_ref: "{{ playbook_dir }}/charts/h3xinfra-longhorn-pre"
        namespace: "{{ longhorn.namespace }}"
        create_namespace: false
        values:
          fullnameOverride: "{{ longhorn.release_name_prefix }}-pre"
          longhornCifsSecret:
            cifsUsername: "{{ longhorn.cifs_username }}"
            cifsPassword: "{{ longhorn.cifs_password }}"
        state: present
        wait: true
        timeout: "120s"

    - name: Deploy Longhorn via Helm
      kubernetes.core.helm:
        name: "{{ longhorn.release_name_prefix }}-main"
        chart_ref: "longhorn/longhorn"
        chart_version: "{{ longhorn.chart_version }}"
        namespace: "{{ longhorn.namespace }}"
        create_namespace: false
        values: 
          defaultSettings:
            # Storage Configuration
            defaultDataPath: /var/lib/longhorn/
            storageMinimalAvailablePercentage: 10
            storageOverProvisioningPercentage: 200
            storageReservedPercentageForDefaultDisk: 5

            # Performance Optimization
            defaultReplicaCount: 2
            defaultDataLocality: best-effort
            replicaAutoBalance: least-effort

            # Security and Stability
            replicaSoftAntiAffinity: "false"
            allowVolumeCreationWithDegradedAvailability: "false"

            # Instance Manager CPU (V1 Data Engine)
            guaranteedInstanceManagerCpu: 15

            # Backup and Maintenance
            createDefaultDiskLabeledNodes: "false"
          defaultBackupStore:
            backupTarget: "{{ longhorn.cifs_backup_target }}"
            backupTargetCredentialSecret: "{{ longhorn.release_name_prefix }}-pre-cifs-secret"

        state: present
        wait: true
        timeout: "120s"

    - name: Deploy Longhorn configuration via Helm
      kubernetes.core.helm:
        name: "{{ longhorn.release_name_prefix }}-post"
        chart_ref: "{{ playbook_dir }}/charts/h3xinfra-longhorn-post"
        namespace: "{{ longhorn.namespace }}"
        create_namespace: false
        values:
          fullnameOverride: "{{ longhorn.release_name_prefix }}-post"
          longhornIngress:
            host: "{{ longhorn.ingress_host }}"
            trustedIPs: "{{ longhorn.trusted_ips }}"
            tls:
              enabled: "{{ longhorn.ingress.tls.enabled | default(false) }}"
              issuer: "{{ longhorn.ingress.tls.issuer | default('') }}"
            auth:
              method: "{{ longhorn.auth.method | default('none') }}"
              basic:
                secret: "{{ longhorn.auth.basic.secret | default('') }}"
                realm: "{{ longhorn.auth.basic.realm | default('Authentication Required') }}"
              oauth2_proxy:
                service_name: "{{ longhorn.release_name_prefix }}-oauth2-oauth2-proxy"
                
        state: present
        wait: true
        timeout: "120s"
